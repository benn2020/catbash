I believe that this solution works for the brief as it successfully takes in a user's username, then extracts their full name, as well as their home directory.
Once the username is entered, the script checks to see if that username is valid, by checking the /etc/passwd file, using getent, and if the search came back empty, then the script would search the file again but in lowercase.
To get the first of the user, getent gets the whole user entry from the file, then pipes the result into awk, which gets the first word, then pipes that result into awk again. This awk command changes the separator to a colon, then gets the fifth word, which is the first name of the user.
To get the second name, I use getent to get the user entry, then pipe the result into awk to get the second word through to the last word, as this needs to happen for users with multiple second names. I pipe that result into another awk that changes the deliminator to to a colon, and then gets the sixth word, which is the users last name.
Once I have the user's surname, I can welcome them to the program with the appropriate time. To do this is, I use the "date" command with the "+%R" option. This gave the date in 24 hour : Minute format. This is useful as it is clear what the time is, and it can be used in conditional statements. To use the appropriate greeting, I used conditional statements that checked that the time was larger than the lower bound but smaller than the upper bound.
I then asked the user to input an option, which I changed to lowercase, to make sure that the inputs are valid. 
Once the user has entered an option. It goes to an if statement that checks which option the user has entered. 
Depending on which option the user has entered, the script will run a specific option on the 'cat' command on the operating users .bashrc file. The script then sets the processed bash into a variable.
The if statement has a condition to check if the user hasn't entered a valid option. This will produce a message to the user and then exit the script.
Once the .bashrc file has been processed, it prints the processed .bashrc file to the user. 
After it has shown the user the processed .bashrc file to the user, it then creates the user.txt file. It uses '-' characters to make the file looks nicer.
The script then adds the time the user started the script, their username, their full name, their home directory, and the current time and date. 
The script ends by saying goodbye, and then tells the user how long they have been running the script for.


